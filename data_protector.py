import re, json, time, os\n\nLOG_FILE = \"logs/data_log.json\"\n\nSENSITIVE_PATTERNS = {\n    \"email\": r\"([a-zA-Z0-9._%+-])[a-zA-Z0-9._%+-]*(@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\",\n    \"phone\": r\"(\\+?\\d{2})(\\d{2,})(\\d{2})$\",\n    \"card\": r\"(\\d{4})\\d{8,12}(\\d{4})\"\n}\n\ndef mask_data(data: dict, ttl: int = 3600):\n    masked = {}\n    for k, v in data.items():\n        if not isinstance(v, str):\n            masked[k] = v\n            continue\n        if k in SENSITIVE_PATTERNS:\n            pattern = SENSITIVE_PATTERNS[k]\n            if k == \"email\":\n                masked[k] = re.sub(pattern, r\"\\1***\\2\", v)\n            elif k == \"phone\":\n                masked[k] = re.sub(pattern, r\"\\1******\\3\", v)\n            elif k == \"card\":\n                masked[k] = re.sub(pattern, r\"\\1************\\2\", v)\n        else:\n            masked[k] = v\n\n    entry = {\n        \"input\": data,\n        \"output\": masked,\n        \"ttl\": ttl,\n        \"timestamp\": time.time()\n    }\n    _log_entry(entry)\n    return masked\n\ndef _log_entry(entry):\n    entries = []\n    if os.path.exists(LOG_FILE):\n        with open(LOG_FILE, \"r\", encoding=\"utf-8\") as f:\n            try:\n                entries = json.load(f)\n            except json.JSONDecodeError:\n                entries = []\n    entries.append(entry)\n    with open(LOG_FILE, \"w\", encoding=\"utf-8\") as f:\n        json.dump(entries, f, indent=2)\n